x:
  if x <= 1 then
    null
  else
    # foldl' е функция за "folding"
    # Това наричаме операция, която редуцира/превръща списък в друга стойност
    # Можем донякъде да го мислим като най-близкото нещо до for цикъл
    #
    # Работим с акумулатор. Той получава стойност по подразбиране.
    # След това, за всеки елемент на списъка, извикваме функция на която подаваме
    # текущия акумулатора и текущата стойност в списъка. Функцията връща новата
    # стойност на списъка.
    #
    # Пример:
    # builtins.fold' (acc: elem: acc * elem) 1 [ 3 4 5 6 ]
    #
    # прави нещо наподобяващо на
    #
    # acc = 1
    # func = acc: elem: acc * elem
    # arr = [ 3 4 5 6 ]
    # acc = func acc (elemAt arr 0)  # стойността е 1 * 3 = 3
    # acc = func acc (elemAt arr 1)  # стойността е 3 * 4 = 12
    # acc = func acc (elemAt arr 2)  # стойността е 12 * 5 = 60
    # acc = func acc (elemAt arr 3)  # стойността е 60 * 6 = 120
    # acc  # връщаме последната стойност на акумулатора
    #
    # Разбира се, акамулатора може да бъде от всякакъв тип и във функцията да
    # извършваме всякаква операция
    #
    # Пример:
    # builtins.foldl' (acc: elem: [ elem ] ++ acc) [] [ 1 2 3 4 5 ]
    # Горното ще върне [ 5 4 3 2 1 ]
    builtins.foldl'
      (accumulator: element: accumulator + element)
      0
      (builtins.genList (i: 1 + i) x)
